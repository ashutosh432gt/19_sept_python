Q.1)What is Dictionaries?
ans--->A dictionary in Python is an unordered collection of data in a key-value pair format. Each entry in a dictionary is made up of a key and its associated value. Dictionaries are also sometimes referred to as associative arrays, hash maps, or hash tables in other programming languages. Here are some key characteristics of dictionaries in Python:

Unordered: Unlike lists or tuples, dictionaries have no specific order for their elements. The elements are not indexed by numerical positions, but rather by their keys.

Mutable: Dictionaries are mutable, which means you can add, modify, or remove key-value pairs after creating a dictionary.

Keys: Keys in a dictionary are unique, meaning each key can only appear once within a dictionary. If you attempt to add a duplicate key, the new value will simply overwrite the existing value associated with that key.

Data Types: Keys in a dictionary can be of any hashable data type (e.g., strings, integers, and some other immutable types), while values can be of any data type (including other dictionaries or complex objects)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.2)How will you create a dictionary in python?How will you get all the keys from the
dictionary?How will you get all the values from the dictionary?
ans--->To create a dictionary in Python we use curly braces `{}` and specify key-value pairs.

						my_dict = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}


To get all the keys from a dictionary,use the `keys()` method:

								all_keys = my_dict.keys()

To get all the values from a dictionary,use the `values()` method:

							      all_values = my_dict.values()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.4)How will you create a dictionary using tuples in python?
ans---->To create a dictionary using tuples in Python,use the dict() constructor with a list of key-value pairs where each pair is represented as a tuple. Here's how to do it:
				key_value_tuples = [('key1', 'value1'), ('key2', 'value2'), ('key3', 'value3')]
				my_dict = dict(key_value_tuples)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.8)How Do You Traverse Through A Dictionary Object In Python?
ans-->To iterate a dictionary using a specified order, use Python's sorted() method. The item will initially be sorted before being traversed through by a for a loop. Dictionary keys are sorted by the function sorted(dictionary. keys()), and for iterates through the keys that were returned. 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.9).How Do You Check The Presence Of A Key In A Dictionary?
ans--->Check If Key Exists using get()
      Using the Inbuilt method get() method returns a list of available keys in the dictionary.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.16)Why Do You Use The Zip() Method In Python?
ans--->The `zip()` function in Python is used to combine multiple iterables (e.g., lists, tuples, or other sequences) into a single iterable. It pairs up elements from each input iterable into tuples, and it continues until the shortest input iterable is exhausted. This is useful in a variety of situations, and here are a few common use cases:

1. **Iterating Over Multiple Lists in Parallel:** You can use `zip()` to iterate over multiple lists in parallel, processing elements from each list at the same position together. For example:

python
names = ["Alice", "Bob", "Charlie"]
scores = [90, 88, 76]

for name, score in zip(names, scores):
    print(f"{name}: {score} points")


This code combines the `names` and `scores` lists into pairs and iterates through them together, allowing you to print the names and corresponding scores.

2. **Creating Dictionaries:** You can use `zip()` to create dictionaries from two lists, where one list contains keys and the other contains values:

python
keys = ["a", "b", "c"]
values = [1, 2, 3]

my_dict = dict(zip(keys, values))
# Result: {'a': 1, 'b': 2, 'c': 3}


3. **Unzipping:** You can also use `zip()` to unzip a list of tuples into separate lists. To do this, you can apply the `zip()` function with the `*` operator to unpack the tuples:

python
pairs = [(1, 'one'), (2, 'two'), (3, 'three')]
numbers, words = zip(*pairs)
# numbers = (1, 2, 3)
# words = ('one', 'two', 'three')


4. **Combining Iterables for Further Processing:** `zip()` can be used to combine multiple iterables for further processing. For example, you might want to combine two lists, perform some operations on the paired elements, and store the results in a new list.

python
list1 = [1, 2, 3]
list2 = [4, 5, 6]

result = [a + b for a, b in zip(list1, list2)]
# Result: [5, 7, 9]

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------